import logging
import asyncio
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from config import BOT_TOKEN
from utils.gpt_client import evaluate_portfolio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–æ–≤
user_albums = defaultdict(list)
album_tasks = {}

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º), "
        "–∏ —è –æ—Ü–µ–Ω—é –∏—Ö –∫–∞–∫ –µ–¥–∏–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üñºÔ∏è"
    )

@dp.message(F.photo)
async def handle_photos(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ –∏ –∞–ª—å–±–æ–º–æ–≤ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–∞–¥—Ä–æ–≤.
    """
    os.makedirs("downloads", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
    file_info = await bot.get_file(message.photo[-1].file_id)
    file_path = f"downloads/{message.photo[-1].file_id}.jpg"
    await bot.download_file(file_info.file_path, destination=file_path)

    album_id = message.media_group_id

    if album_id:
        # –§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        user_albums[album_id].append(file_path)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if album_id not in album_tasks:
            album_tasks[album_id] = asyncio.create_task(
                process_album_after_delay(album_id, message)
            )
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        await process_portfolio(message, [file_path])

async def process_album_after_delay(album_id, message: Message, delay=2):
    """
    –ñ–¥—ë—Ç delay —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –≤ GPT.
    """
    await asyncio.sleep(delay)
    images = user_albums.pop(album_id, [])
    album_tasks.pop(album_id, None)
    if images:
        await process_portfolio(message, images)

async def process_portfolio(message: Message, image_paths: list):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        feedback = await evaluate_portfolio(image_paths)
    except Exception as e:
        feedback = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}"

    await message.answer(f"üìä –û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n\n{feedback}", parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for path in image_paths:
        try:
            os.remove(path)
        except:
            pass

@dp.message()
async def handle_other(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
